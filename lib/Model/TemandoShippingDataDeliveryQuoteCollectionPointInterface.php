<?php
/**
 * TemandoShippingDataDeliveryQuoteCollectionPointInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  MagentoApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Community
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MagentoApi\Model;

use \ArrayAccess;
use \MagentoApi\ObjectSerializer;

/**
 * TemandoShippingDataDeliveryQuoteCollectionPointInterface Class Doc Comment
 *
 * @category Class
 * @description Temando Quote Collection Point Interface â€“ Checkout/Quoting
 * @package  MagentoApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TemandoShippingDataDeliveryQuoteCollectionPointInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'temando-shipping-data-delivery-quote-collection-point-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entity_id' => 'int',
'collection_point_id' => 'string',
'recipient_address_id' => 'int',
'name' => 'string',
'country' => 'string',
'region' => 'string',
'postcode' => 'string',
'city' => 'string',
'street' => 'string[]',
'distance' => 'int',
'opening_hours' => 'string[]',
'shipping_experiences' => 'string[]',
'selected' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'entity_id' => null,
'collection_point_id' => null,
'recipient_address_id' => null,
'name' => null,
'country' => null,
'region' => null,
'postcode' => null,
'city' => null,
'street' => null,
'distance' => null,
'opening_hours' => null,
'shipping_experiences' => null,
'selected' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_id' => 'entity_id',
'collection_point_id' => 'collection_point_id',
'recipient_address_id' => 'recipient_address_id',
'name' => 'name',
'country' => 'country',
'region' => 'region',
'postcode' => 'postcode',
'city' => 'city',
'street' => 'street',
'distance' => 'distance',
'opening_hours' => 'opening_hours',
'shipping_experiences' => 'shipping_experiences',
'selected' => 'selected'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity_id' => 'setEntityId',
'collection_point_id' => 'setCollectionPointId',
'recipient_address_id' => 'setRecipientAddressId',
'name' => 'setName',
'country' => 'setCountry',
'region' => 'setRegion',
'postcode' => 'setPostcode',
'city' => 'setCity',
'street' => 'setStreet',
'distance' => 'setDistance',
'opening_hours' => 'setOpeningHours',
'shipping_experiences' => 'setShippingExperiences',
'selected' => 'setSelected'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity_id' => 'getEntityId',
'collection_point_id' => 'getCollectionPointId',
'recipient_address_id' => 'getRecipientAddressId',
'name' => 'getName',
'country' => 'getCountry',
'region' => 'getRegion',
'postcode' => 'getPostcode',
'city' => 'getCity',
'street' => 'getStreet',
'distance' => 'getDistance',
'opening_hours' => 'getOpeningHours',
'shipping_experiences' => 'getShippingExperiences',
'selected' => 'getSelected'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['collection_point_id'] = isset($data['collection_point_id']) ? $data['collection_point_id'] : null;
        $this->container['recipient_address_id'] = isset($data['recipient_address_id']) ? $data['recipient_address_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['opening_hours'] = isset($data['opening_hours']) ? $data['opening_hours'] : null;
        $this->container['shipping_experiences'] = isset($data['shipping_experiences']) ? $data['shipping_experiences'] : null;
        $this->container['selected'] = isset($data['selected']) ? $data['selected'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entity_id'] === null) {
            $invalidProperties[] = "'entity_id' can't be null";
        }
        if ($this->container['collection_point_id'] === null) {
            $invalidProperties[] = "'collection_point_id' can't be null";
        }
        if ($this->container['recipient_address_id'] === null) {
            $invalidProperties[] = "'recipient_address_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        if ($this->container['postcode'] === null) {
            $invalidProperties[] = "'postcode' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        if ($this->container['opening_hours'] === null) {
            $invalidProperties[] = "'opening_hours' can't be null";
        }
        if ($this->container['shipping_experiences'] === null) {
            $invalidProperties[] = "'shipping_experiences' can't be null";
        }
        if ($this->container['selected'] === null) {
            $invalidProperties[] = "'selected' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entity_id
     *
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param int $entity_id entity_id
     *
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets collection_point_id
     *
     * @return string
     */
    public function getCollectionPointId()
    {
        return $this->container['collection_point_id'];
    }

    /**
     * Sets collection_point_id
     *
     * @param string $collection_point_id collection_point_id
     *
     * @return $this
     */
    public function setCollectionPointId($collection_point_id)
    {
        $this->container['collection_point_id'] = $collection_point_id;

        return $this;
    }

    /**
     * Gets recipient_address_id
     *
     * @return int
     */
    public function getRecipientAddressId()
    {
        return $this->container['recipient_address_id'];
    }

    /**
     * Sets recipient_address_id
     *
     * @param int $recipient_address_id recipient_address_id
     *
     * @return $this
     */
    public function setRecipientAddressId($recipient_address_id)
    {
        $this->container['recipient_address_id'] = $recipient_address_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string[]
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string[] $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets opening_hours
     *
     * @return string[]
     */
    public function getOpeningHours()
    {
        return $this->container['opening_hours'];
    }

    /**
     * Sets opening_hours
     *
     * @param string[] $opening_hours opening_hours
     *
     * @return $this
     */
    public function setOpeningHours($opening_hours)
    {
        $this->container['opening_hours'] = $opening_hours;

        return $this;
    }

    /**
     * Gets shipping_experiences
     *
     * @return string[]
     */
    public function getShippingExperiences()
    {
        return $this->container['shipping_experiences'];
    }

    /**
     * Sets shipping_experiences
     *
     * @param string[] $shipping_experiences shipping_experiences
     *
     * @return $this
     */
    public function setShippingExperiences($shipping_experiences)
    {
        $this->container['shipping_experiences'] = $shipping_experiences;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool $selected selected
     *
     * @return $this
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
