<?php
/**
 * CatalogDataProductRenderInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  MagentoApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Community
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MagentoApi\Model;

use \ArrayAccess;
use \MagentoApi\ObjectSerializer;

/**
 * CatalogDataProductRenderInterface Class Doc Comment
 *
 * @category Class
 * @description Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data
 * @package  MagentoApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogDataProductRenderInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'catalog-data-product-render-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_to_cart_button' => '\MagentoApi\Model\CatalogDataProductRenderButtonInterface',
'add_to_compare_button' => '\MagentoApi\Model\CatalogDataProductRenderButtonInterface',
'price_info' => '\MagentoApi\Model\CatalogDataProductRenderPriceInfoInterface',
'images' => '\MagentoApi\Model\CatalogDataProductRenderImageInterface[]',
'url' => 'string',
'id' => 'int',
'name' => 'string',
'type' => 'string',
'is_salable' => 'string',
'store_id' => 'int',
'currency_code' => 'string',
'extension_attributes' => '\MagentoApi\Model\CatalogDataProductRenderExtensionInterface'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'add_to_cart_button' => null,
'add_to_compare_button' => null,
'price_info' => null,
'images' => null,
'url' => null,
'id' => null,
'name' => null,
'type' => null,
'is_salable' => null,
'store_id' => null,
'currency_code' => null,
'extension_attributes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_to_cart_button' => 'add_to_cart_button',
'add_to_compare_button' => 'add_to_compare_button',
'price_info' => 'price_info',
'images' => 'images',
'url' => 'url',
'id' => 'id',
'name' => 'name',
'type' => 'type',
'is_salable' => 'is_salable',
'store_id' => 'store_id',
'currency_code' => 'currency_code',
'extension_attributes' => 'extension_attributes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_to_cart_button' => 'setAddToCartButton',
'add_to_compare_button' => 'setAddToCompareButton',
'price_info' => 'setPriceInfo',
'images' => 'setImages',
'url' => 'setUrl',
'id' => 'setId',
'name' => 'setName',
'type' => 'setType',
'is_salable' => 'setIsSalable',
'store_id' => 'setStoreId',
'currency_code' => 'setCurrencyCode',
'extension_attributes' => 'setExtensionAttributes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_to_cart_button' => 'getAddToCartButton',
'add_to_compare_button' => 'getAddToCompareButton',
'price_info' => 'getPriceInfo',
'images' => 'getImages',
'url' => 'getUrl',
'id' => 'getId',
'name' => 'getName',
'type' => 'getType',
'is_salable' => 'getIsSalable',
'store_id' => 'getStoreId',
'currency_code' => 'getCurrencyCode',
'extension_attributes' => 'getExtensionAttributes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_to_cart_button'] = isset($data['add_to_cart_button']) ? $data['add_to_cart_button'] : null;
        $this->container['add_to_compare_button'] = isset($data['add_to_compare_button']) ? $data['add_to_compare_button'] : null;
        $this->container['price_info'] = isset($data['price_info']) ? $data['price_info'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['is_salable'] = isset($data['is_salable']) ? $data['is_salable'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['extension_attributes'] = isset($data['extension_attributes']) ? $data['extension_attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['add_to_cart_button'] === null) {
            $invalidProperties[] = "'add_to_cart_button' can't be null";
        }
        if ($this->container['add_to_compare_button'] === null) {
            $invalidProperties[] = "'add_to_compare_button' can't be null";
        }
        if ($this->container['price_info'] === null) {
            $invalidProperties[] = "'price_info' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['is_salable'] === null) {
            $invalidProperties[] = "'is_salable' can't be null";
        }
        if ($this->container['store_id'] === null) {
            $invalidProperties[] = "'store_id' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['extension_attributes'] === null) {
            $invalidProperties[] = "'extension_attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_to_cart_button
     *
     * @return \MagentoApi\Model\CatalogDataProductRenderButtonInterface
     */
    public function getAddToCartButton()
    {
        return $this->container['add_to_cart_button'];
    }

    /**
     * Sets add_to_cart_button
     *
     * @param \MagentoApi\Model\CatalogDataProductRenderButtonInterface $add_to_cart_button add_to_cart_button
     *
     * @return $this
     */
    public function setAddToCartButton($add_to_cart_button)
    {
        $this->container['add_to_cart_button'] = $add_to_cart_button;

        return $this;
    }

    /**
     * Gets add_to_compare_button
     *
     * @return \MagentoApi\Model\CatalogDataProductRenderButtonInterface
     */
    public function getAddToCompareButton()
    {
        return $this->container['add_to_compare_button'];
    }

    /**
     * Sets add_to_compare_button
     *
     * @param \MagentoApi\Model\CatalogDataProductRenderButtonInterface $add_to_compare_button add_to_compare_button
     *
     * @return $this
     */
    public function setAddToCompareButton($add_to_compare_button)
    {
        $this->container['add_to_compare_button'] = $add_to_compare_button;

        return $this;
    }

    /**
     * Gets price_info
     *
     * @return \MagentoApi\Model\CatalogDataProductRenderPriceInfoInterface
     */
    public function getPriceInfo()
    {
        return $this->container['price_info'];
    }

    /**
     * Sets price_info
     *
     * @param \MagentoApi\Model\CatalogDataProductRenderPriceInfoInterface $price_info price_info
     *
     * @return $this
     */
    public function setPriceInfo($price_info)
    {
        $this->container['price_info'] = $price_info;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \MagentoApi\Model\CatalogDataProductRenderImageInterface[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \MagentoApi\Model\CatalogDataProductRenderImageInterface[] $images Enough information, that needed to render image on front
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Product url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Product identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Product name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Product type. Such as bundle, grouped, simple, etc...
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_salable
     *
     * @return string
     */
    public function getIsSalable()
    {
        return $this->container['is_salable'];
    }

    /**
     * Sets is_salable
     *
     * @param string $is_salable Information about product saleability (In Stock)
     *
     * @return $this
     */
    public function setIsSalable($is_salable)
    {
        $this->container['is_salable'] = $is_salable;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param int $store_id Information about current store id or requested store id
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Current or desired currency code to product
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets extension_attributes
     *
     * @return \MagentoApi\Model\CatalogDataProductRenderExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extension_attributes'];
    }

    /**
     * Sets extension_attributes
     *
     * @param \MagentoApi\Model\CatalogDataProductRenderExtensionInterface $extension_attributes extension_attributes
     *
     * @return $this
     */
    public function setExtensionAttributes($extension_attributes)
    {
        $this->container['extension_attributes'] = $extension_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
